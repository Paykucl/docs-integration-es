openapi: 3.0.0
servers:
  - url: "https://app.liset.cl"
    description: Default server
  - url: "https://des.liset.cl"
    description: Sandbox server
info:
  description: |
    Seleccione el idioma de la documentación: ES | <a href="https://endocs.liset.cl/">EN</a>

    # INTEGRACIÓN
    Payku tiene a su disposición diferentes ambientes:
      - **Desarrollo:** en donde podrás realizar las pruebas de operatividad completa
       URL:  https://des.payku.cl/
      - **Producción:** 
       URL: https://app.payku.cl/

    # REGISTRO  
      Para crear transacciones con payku vía API REST, primero debe 
      completar un registro de usuario y cuenta en nuestro sistema siguiendo las 
      siguientes instrucciones:
    
    ## Crear usuario 
    - Debe crear un usuario registrándose en: Https://AMBIENTE.payku.cl/index/registro
      <br>
      <br>
      <div class='container'>
        <img src='./assets/iniciar-sesion.jpg' alt='Avatar' class='image' style='width:100%'>
        <div class='middle'>
          <a target='_blank' href='/assets/iniciar-sesion.jpg' class='text'>Ver diagrama</a>
        </div>
      </div>    
      <br>
    - Una vez registrado su usuario, deberá crear una cuenta (si ha registrado su usuario en ambiente de desarrollo, el sistema creara automáticamente su cuenta). Será redirigido a la siguiente pantalla en la que deberá llenar todos los datos de formulario:      <br>
      <br>
      <div class='container'>
        <img src='./assets/onboarding.jpg' alt='Avatar' class='image' style='width:100%'>
        <div class='middle'>
          <a target='_blank' href='/assets/onboarding.jpg' class='text'>Ver diagrama</a>
        </div>
      </div>    
      <br>
    - Una vez creada la cuenta, necesitara los tokens públicos y privados para realizar la firma; puede utilizar los generados por el sistema inicialmente o crear nuevos. Para ello debe dirigirse al menú lateral izquierdo y clicar en **“integración”**, el cual desplegará un submenú de opciones, seleccione **“tokens de integración y API”** como se muestra a continuación:       <br>
      <br>
      <div class='container'>
        <img src='./assets/tokens-menu.jpg' alt='Avatar' class='image' style='width:100%'>
        <div class='middle'>
          <a target='_blank' href='/assets/tokens-menu.jpg' class='text'>Ver diagrama</a>
        </div>
      </div>    
      <br>
    - Se mostrará la siguiente pantalla:   
    <br>
    <br>
      <div class='container'>
        <img src='./assets/tokens.jpg' alt='Avatar' class='image' style='width:100%'>
        <div class='middle'>
          <a target='_blank' href='/assets/tokens.jpg' class='text'>Ver diagrama</a>
        </div>
      </div>    
      <br>  
      El Token público es para identificar al comercio y el token privado para crear la firma
    
    # CREACIÓN DE FIRMA
    A continuación, se mostrará un ejemplo de cómo crear la firma usando Javascript.   
    - Debe importar el módulo **cryptojs:**
    ```javascript
    const CryptoJS = require("crypto-js");
    ```
    - Utilizar el Endpoint de la API: 
    ```javascript
    const requestPath = encodeURIComponent("/api/suclient");
    ```
    - Establecer los parámetros para la petición: 
    ```javascript
    const data = {
         "email": "alguien@example.com",
         "name": "John Doe",
         "rut": "111111111",
         "phone": "912345678"
         "address": "Moneda 101",
         "country": "Chile",
         "region": "Metropolitana",
         "city": "Santiago",
         "postal_code": "850000",
         "additional_parameters": {
            "parameter_1": "example",
            "parameter_2": "example 2",
          },
        };
    ```
    - Ordenar los parámetros de la **data:**
    ```javascript
      const orderedData = {};
        Object.keys(data)
        .sort()
        .forEach(function (key) {
          orderedData[key] = data[key];
          if (typeof orderedData[key] === "object") {
            delete orderedData[key];
          }
        }); 
    ```
    La **data** quedará ordenada de la siguiente manera: 
    ```javascript
        "address": "Moneda 101",
        "city": "Santiago",
        "country": "Chile",
        "email": "alguien@example.com",
        "name": "John Doe",
        "phone": "912345678"
        "postal_code": "850000",
        "region": "Metropolitana",
        "rut": "111111111",
    ```
    - Transformar los parámetros a formato URL: 
    ```javascript
      const arrayConcat = new URLSearchParams(orderedData).toString();
    ```
    - Obtendrá como resultado, la siguiente cadena de texto: 
    ```javascript
      aqui va el resultado de la cadena;
    ```
    - Concatenar los parámetros en formato URL junto con el Endpoint de la API:
    ```javascript 
    const concat = requestPath + "&" + arrayConcat;
    ```
      Quedando de la siguiente manera:
    ```javascript
      aqui va el resultado de la cadena;
    ```
    - Finalmente guarda en una variable la firma encriptada usando **cryptojs.hmacsha256**, en el que debe incluir el token privado de la aplicación de PAYKU descrita anteriormente:
    ```javascript
    const sign = CryptoJS.HmacSHA256(concat, "token privado").toString();
    ``` 
    Este sería un ejemplo de cómo quedaría su firma
    ```javascript
      aqui va el resultado de la firma;
    ```
    **Nota**: cabe destacar que los tokens y la URL, deben ser de acuerdo al ambiente de desarrollo que esté utilizando.  
    
    



  version: "2.1.01"
  title: payku API
  termsOfService: "https://liset.cl/legal/"
  contact:
    email: contacto@payku.cl  
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"


paths:
  /api/transaction:
    post:
      tags:
        - TRANSACCION
      summary: Crear transacción
      description: |
        para crear transacciones, puede hacerlo desde el ambiente “desarrollo” https://des.payku.cl/  o “producción” https://app.payku.cl/. Para ello debe hacer lo siguiente:  

        - Cree una variable estableciendo los parámetros para la petición de la API como se muestra a continuación:  
      x-codeSamples:
        - lang: "JS"
          source: |
            const request = async (data) => {
              const response = await fetch('https://BASE_URL/api/transaction', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer TOKEN-PUBLICO'
                },
                body: JSON.stringify(data)
              });
              const result = await response.json();
              console.log(result)
            }

            let data = {
              email: "johndoe@example.com",
              order: "98745",
              subject: "payment description",
              amount: 25000,
              payment: 1,
              expired: "2023-10-19 13:05:10",
              urlreturn: "https://youwebsite.com/urlreturn?orderClient=98745",
              urlnotify: "https://www.youwebsite.com/urlnotify?orderClient=98745",
              additional_parameters: {
                parameters1:"keyValue",
                parameters2:"keyValue",
                order_ext:"fff-777"
              }
            };

            request(data);
  /api/registro:
    post:
      operationId: "registro"
      tags:
        - registro
      summary: Obtener conciliaciones.
      description: Descripción de la operación.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RequestBody"
      responses:
        "200":
          description: Respuesta exitosa.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
components:
  schemas:
    RequestBody:
      type: object
      properties:
        parameter_1:
          description: Nombre del parámetro
          type: string
          example: "keyValue"
        parameter_2:
          description: Nombre del parámetro
          type: string
          example: "keyValue"
        order_ext:
          description: Nombre de la orden externa  (Opcional)
          type: string
          example: "fff-777"
    Response:
      type: object
      properties:
        parameter_1:
          description: Nombre del parámetro
          type: string
          example: "keyValue"
        parameter_2:
          description: Nombre del parámetro
          type: string
          example: "keyValue"
