openapi: 3.0.0
servers:
  - url: "https://app.payku.cl/"
    description: Default server
  - url: "https://des.payku.cl/"
    description: Sandbox server
info:
  description: |
    Seleccione el idioma de la documentación: ES | <a href="https://endocs.payku.cl/">EN</a>

    # Integración
    Payku tiene a su disposición diferentes ambientes:
      - **Desarrollo:** en donde podrás realizar las pruebas de operatividad completa
       URL:  https://des.payku.cl/
      - **Producción:** 
       URL: https://app.payku.cl/

    # Registro  
      Para crear transacciones con payku vía API REST, primero debe 
      completar un registro de usuario y cuenta en nuestro sistema siguiendo las 
      siguientes instrucciones:

    ## Crear usuario 
    - Debe crear un usuario registrándose en: https://BASE_URL/index/registro
      <br>
      <br>
      <div class='container'>
        <img src='./assets/iniciar-sesion.jpg' alt='Avatar' class='image' style='width:100%'>
        <div class='middle'>
          <a target='_blank' href='/assets/iniciar-sesion.jpg' class='text'>Ver imagen</a>
        </div>
      </div>    
      <br>
    - Una vez registrado su usuario, deberá crear una cuenta (si ha registrado su usuario en ambiente de desarrollo, el sistema creara automáticamente su cuenta). Será redirigido a la siguiente pantalla en la que deberá llenar todos los datos de formulario:      <br>
      <br>
      <div class='container'>
        <img src='./assets/onboarding.jpg' alt='Avatar' class='image' style='width:100%'>
        <div class='middle'>
          <a target='_blank' href='/assets/onboarding.jpg' class='text'>Ver imagen</a>
        </div>
      </div>    
      <br>
    - Una vez creada la cuenta, necesitara los tokens públicos y privados para realizar la firma; puede utilizar los generados por el sistema inicialmente o crear nuevos. Para ello debe dirigirse al menú lateral izquierdo y clicar en **“integración”**, el cual desplegará un submenú de opciones, seleccione **“tokens de integración y API”** como se muestra a continuación:       <br>
      <br>
      <div class='container'>
        <img src='./assets/tokens-menu.jpg' alt='Avatar' class='image' style='width:100%'>
        <div class='middle'>
          <a target='_blank' href='/assets/tokens-menu.jpg' class='text'>Ver imagen</a>
        </div>
      </div>    
      <br>
    - Se mostrará la siguiente pantalla:   
    <br>
    <br>
      <div class='container'>
        <img src='./assets/tokens.jpg' alt='Avatar' class='image' style='width:100%'>
        <div class='middle'>
          <a target='_blank' href='/assets/tokens.jpg' class='text'>Ver imagen</a>
        </div>
      </div>    
      <br>  
     
      El **Token público** es para identificar al comercio y el **token privado** para crear la firma.

    # Creación de firma
    A continuación, se mostrará un ejemplo de cómo crear la firma usando Javascript.   
    - Debe importar el módulo **cryptojs:**
    ```javascript
    const CryptoJS = require("crypto-js");
    ```
    - Utilizar el Endpoint de la API: 
    ```javascript
    const requestPath = encodeURIComponent("/api/suclient");
    ```
    - Establecer los parámetros para la petición: 
    ```javascript
    const data = {
         "email": "alguien@example.com",
         "name": "John Doe",
         "rut": "111111111",
         "phone": "912345678",
         "address": "Moneda 101",
         "country": "Chile",
         "region": "Metropolitana",
         "city": "Santiago",
         "postal_code": "850000",
         "additional_parameters": {
            "parameter_1": "example",
            "parameter_2": "example 2",
          },
        };
    ```
    - Ordenar los parámetros de la **data:**
    ```javascript
      const orderedData = {};
        Object.keys(data)
        .sort()
        .forEach(function (key) {
          orderedData[key] = data[key];
          if (typeof orderedData[key] === "object") {
            delete orderedData[key];
          }
        }); 
    ```
    La **data** quedará ordenada de la siguiente manera: 
    ```javascript
        "address": "Moneda 101",
        "city": "Santiago",
        "country": "Chile",
        "email": "alguien@example.com",
        "name": "John Doe",
        "phone": "912345678"
        "postal_code": "850000",
        "region": "Metropolitana",
        "rut": "111111111",
    ```
    - Transformar los parámetros a formato URL: 
    ```javascript
      const arrayConcat = new URLSearchParams(orderedData).toString();
    ```
    - Obtendrá como resultado, la siguiente cadena de texto: 
    ```javascript
      "address=Moneda+101&;city=Santiago&;country=Chile&;email=alguien%40example.com&;name=John+Doe&;phone=912345678&;postal_code=850000&;region=Metropolitana&;rut=111111111"
    ```
    - Concatenar los parámetros en formato URL junto con el Endpoint de la API:
    ```javascript 
    const concat = requestPath + "&" + arrayConcat;
    ```
      Quedando de la siguiente manera:
    ```javascript
      "%2Fapi%2Fsuclient&;address=Moneda+101&;city=Santiago&;country=Chile&;email=alguien%40exle.com&;name=John+Doe&;phone=912345678&;postal_code=850000&;region=Metropolitana&;rut=111111111"
    ```
    - Finalmente guarda en una variable la firma encriptada usando **cryptojs.hmacsha256**, en el que debe incluir el token privado de la aplicación de PAYKU descrita anteriormente:
    ```javascript
    const sign = CryptoJS.HmacSHA256(concat, "token privado").toString();
    ``` 
    Este sería un ejemplo de cómo quedaría su firma
    ```javascript
      "4c399a258d378a81857020bcb1f0d74544ba7a05ba9c636c3e9bfc63ebf224d3"
    ```
    **Nota**: cabe destacar que los tokens y la URL, deben ser de acuerdo al ambiente de desarrollo que esté utilizando.

    # Crear transacción
    Para crear transacciones, puede hacerlo desde el ambiente **“desarrollo”** https://des.payku.cl/  o **“producción”** https://app.payku.cl/. Para ello debe hacer lo siguiente:

    - Cree una variable estableciendo los parámetros para la petición de la API como se muestra a continuación:
     ```javascript
          let data = {
            email: "johndoe@example.com",
            order: "98745",
            subject: "payment description",
            amount: 25000,
            payment: 1,
            expired: "2023-10-19 13:05:10",
            urlreturn: "https://youwebsite.com/urlreturn?orderClient=98745",
            urlnotify: "https://www.youwebsite.com/urlnotify?orderClient=98745",
            additional_parameters: {
              parameters1:"keyValue",
              parameters2:"keyValue",
              order_ext:"fff-777"
            }
          };
    request(data);
    ```
    ### Descripción de los parámetros:
    <div class="content-parametros">
    <table>
      <tbody>
        <tr>
          <td style="text-align: right">
            <p class="psmall"><strong>"email"<strong></p>
          </td>
          <td class="Description">Email del usuario.</td>
        </tr>
        <tr>
          <td style="text-align: right">
            <p class="psmall"><strong>"order"<strong></p>
          </td>
          <td class="Description">Orden del comercio.</td>
        </tr>
        <tr>
          <td style="text-align: right">
            <p class="psmall"><strong>"subject"<strong></p>
          </td>
          <td class="Description">Descripción de la orden.</td>
        </tr>
         <tr>
          <td style="text-align: right">
            <p class="psmall"><strong>"amount"<strong></p>
          </td>
          <td class="Description">Monto de la orden.</td>
        </tr>
         <tr>
          <td style="text-align: right">
            <p class="psmall"><strong>"currency"<strong></p>
          </td>
          <td class="Description">Moneda.</td>
        </tr>
        <tr>
          <td style="text-align: right">
            <p class="psmall"><strong>"payment"<strong></p>
          </td>
          <td class="Description">Identificador del medio de pago. Si se envía el identificador, el pagador será redireccionado directamente al medio de pago que se indique.
              <br>
              1 Webpay
              <br>
              3 Multicaja Efectivo
              <br>
              4 Multicaja Transferencia
              <br>
              6 Pago46
              <br>
              8 Hites
              <br>
              9 Mach
              <br>
             11 Khipu
              <br>
             12 Chek
              <br>
             15 servifacil
              <br>
             17 Vepuy (moneda VES)
              <br>
            99 Todos.
        </td>
      </tr>
      <tr>
        <td style="text-align: right">
          <p class="psmall"><strong>"expired"<strong></p>
        </td>
        <td class="Description">Fecha en la cual expira la transacción. Este campo no es requerido. Formato permitido (Año-mes-día hora:minuto:segundo) Ejemplo: 2023-10-18 23:59:59
        En caso de ser enviado, debe cumplir con las siguientes reglas:
        <br>
         &bull; Debe ser mayor a 5 minutos de la fecha actual (hora Santiago).
        <br>
         &bull; Se requiere urlreturn, se adjuntará como parámetros <strong>GET/?Message_error=expired&id=trx60dc327d9e4c094 </strong>
        </td>
      </tr>
         <tr>
          <td style="text-align: right">
            <p class="psmall"><strong>"urlreturn"<strong></p>
          </td>
          <td class="Description">Url de retorno del comercio donde payku redirigirá al pagador luego de 3 segundos de obtener el resultado de la transacción.</td>
        </tr>
        <tr>
          <td style="text-align: right">
            <p class="psmall"><strong>"urlnotify"<strong></p>
          </td>
          <td class="Description">Url callback del comercio donde payku notificara el pago.</td>
        </tr>
        <tr>
          <td style="text-align: right">
            <p class="psmall"><strong>"additional_parameters"<strong></p>
          </td>
          <td class="Description">Parámetros adicionales del cliente (Opcional).</td>
        </tr>
      </tbody>
    </table>
    </div>
    - Crea una función con una petición **fetch** consultando el Endpoint del api. En **“Authorization”** debe colocar su **token público** descrito anteriormente.

    ```javascript
    const request = async (data) => {
      const response = await fetch('https://BASE_URL/api/transaction', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer TOKEN-PUBLICO'
        },
        body: JSON.stringify(data)
      });
    const result = await response.json();
    console.log(result)
    }
    request(data);
    ```
    **Nota:** el método de **“crear transacción”**, no requiere firma (sign).
    - Una vez creada la transacción, le mostrara la siguiente respuesta:
    ```javascript
      {
        "status": "pending",
        "id": "trx3b4d77b43acd9a720",
        "url": "https://BASE_URL/url_de_pago"
      }
    ```
    **Nota:** Use la URL del response para redireccionar al cliente a la página del banco donde deberá ingresar sus datos.

    # Consultar transacción
    Si ya ha creado una transacción vía API REST, es posible consultarla de la siguiente manera.
    - Debe consultar el siguiente Endpoint, en el cual se agrega al final de la ruta, el **ID de la transacción** creada anteriormente. Al igual que en el paso anterior, debe agregar el **token público** de su entorno de desarrollo en **“Authorization”** para hacer la consulta como se muestra a continuación:

     ```javascript
      const request = async () => {
      const response = await fetch('https://BASE_URL/api/transaction/IDtransaccion', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer TOKEN-PUBLICO'
        },
      });
      const result = await response.json();
      console.log(result)
    }
    request();
    ```
    # Notificación de resultado del pago al comercio (callback)

    Luego de que el cliente finalice el proceso de pago en su entidad bancaria, payku responderá de forma automática al Endpoint ingresado en **“urlnotify”** el resultado de la operación bancaria.

    **Ejemplo Aprobado:**  <br>
      {  <br>
      "transaction_id": "9916587765599311", <br>
      "payment_key" : "trx32cb779c0a777fc68",  <br>
      "transaction_key" : "9916581777599311",  <br>
      "verification_key": "8b3e2202fb086a7de93777ae34d5e18c",  <br>
      "order": "199",  <br>
      "status": "success"  <br>
      }  <br>
      **Ejemplo Rechazado:**  <br>
      {  <br>
      "transaction_id": "9916587765599311",  <br>
      "payment_key" : "trx32cb779c0a777fc68",  <br>
      "transaction_key" : "9916581777599311",  <br>
      "verification_key": "8b3e2202fb086a7de93777ae34d5e18c",  <br>
      "order": "199",  <br>
      "status": "failed"  <br>
      }

    **Nota:** para garantizar que la notificación fue originada por payku, deberá inmediatamente realizar una petición vía GET con el ID de la transacción notificada y de esta manera realizar una validación cruzada que garantice al 100% la integridad y veracidad de los datos. 
    <br>
    <br>
    Cabe destacar que puede realizar pruebas en vivo de todas las apis disponibles en el siguiente enlace: https://testing-apirest.payku.cl/, también puede consultar la documentación oficial de payku a través de: https://docs.payku.cl/#section/.

  version: "2.1.01"
  title: payku API
  termsOfService: "https://payku.cl/legal/"
  contact:
    email: contacto@payku.cl
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
  x-logo:
    url: "https://storage.googleapis.com/storage-payku-prd/public/img/payku2020_2.svg"
